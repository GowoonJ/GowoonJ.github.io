---
layout: single
title:  "슈트라센 알고리즘"
date:   2020-04-14 01:19:40 +0900
categories: jekyll update
---

Strassen Algorihm
==============

### 고차원 행렬의 곱을 더 효율적으로 할 수 있는 **슈트라센 알고리즘?**

#### 기본적인 행렬의 곱부터 알아보자
일반적인 2*2 행렬의 곱을 식으로 나타내보면
$$
행렬 A[i][k], 행렬 B[k][j]
$$

#### *for문으로 나타낸 코드*
~~~~
for(int i = 0 ; i<2 ; i++){
	for(int j = 0 ; i < 2 ; i++{
		for (int k = 0 ; i < 2 ; k++{
		C[i][j] += A[i][k] * B[k][j];
		}
	}
}
~~~~
위와 같은 형태이며, 
시간복잡도 : 
$$
O(n^3) 
$$


> 행렬 곱 계산은 8번의 곱셈 + 4번의 덧셈으로 구성된다.

### Strassen Algorithm
슈트라센 알고리즘
:	독일의 수학자 슈트라센(*Volker Strassen*)이 만든 행렬곱셈 알고리즘
- 시간복잡도 : 
  $$
  O(n^{2.81})
  $$

  크게 차이가 나지 않는 것 같아보이지만 행렬의 차수가 높아질수록 연산 시간에서 차이가 드러난다
  $$
  C[2n][2n] = A[2n]*B[2n]
  $$

  - 만약 2n*2n이 아니라면 빈자리 0으로 채우기*
  - *행렬  A, B, C는 각각 n*n크기의 부분행렬로 분할
$$
m_1 = (a_{11}+a_{12})(b_{11}+b_{22}) \\
m_2 = (a_{21}+a_{22})b_{11} \\
m_3 = a_{11}(b_{12}-b_{22})  \\
m_4 = a_{22}(b_{21}-b_{11})  \\
m_5 = (a_{11}+a_{12})b_{22} \\
m_6 = (a_{21}-a_{11})(b_{11}+b_{12}) \\ 
m_6 = (a_{12}-a_{22})(b_{21}+b_{22}) \\
$$
 위의 7개 수식으로 C를 표현할 수 있다.
$$
C=\begin{bmatrix}
{m_1+m_4-m_5+m_7}&{m_3+m_5} \\
{m_2+m_4}&{m_1+m_3-m_2+m_6}
\end{bmatrix}
$$
> 슈트라센 알고리즘은 7번의 곱셈+18번의 (덧셈/뺄셈)으로 구성된다.



#### *Java로 슈트라센 알고리즘을 구현해보면?*

